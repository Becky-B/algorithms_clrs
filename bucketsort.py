
### Insertion sort is required for bucketsort
def insertion_sort(arr):
    """ From Introduction to Algorithms by Corman, et al
    pgs. 16-22. Sorts elements in place
    wosrt case running time: theta(n^2) """
    for j in range(1,len(arr)):
        key = arr[j]
        i = j-1
        while i >= 0 and arr[i] > key:
            arr[i+1] = arr[i]
            i = i - 1
            arr[i+1] = key
    return arr

def bucketsort(arr):
    """
    Input: arr - the array to be sorted
    Output: a new sorted array (does not mutate original array) 
    
    Bucket sort assumes that the input is generated by a random process that
    distributes elements uniformly and independantly over the interval [0,1]
    
    Bucket sort divides the interval [0,1] into n equal-sized subintervals (buckets),
    and then distributes the n input numbers into the buckets. Since the inputs are
    uniformly and evenly distributed over [0,1], it is not exected that many numbers
    will fall into each bucket.

    Once number are placed in buckets, we sort the numbers in each bucket (with insertion sort),
    and then go through the buckets in order, lisitng the elements in each
    
    Average-case running time: O(n).

    * The above comments are a quotation of CLRS pg 200 *    
    """
    n = len(arr)
    B = [ [] for i in range(n) ]
    for i in range(n):
        B[min(n, arr[i])].append(arr[i])
    for i in range(n-1):
        insertion_sort(B[i])
    output = []
    for l in B:
        output += l
    return output

### Test ###
alist = [5,3,8,2,1,9,7,2,6,4]
print(bucketsort(alist)) # [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]
print(alist)